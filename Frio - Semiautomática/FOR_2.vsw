{
  "mode": "form-creator",
  "cells": [
    {
      "id": "title",
      "type": "h1",
      "value": "Tensão&nbsp;"
    },
    {
      "id": "MTY4MzgxMjg0NTI5MzEwMDg2NTE5",
      "type": "list",
      "items": [
        {
          "id": "MTY4MzgxMjg3NDEyMTEwMDg2NTE5",
          "type": "input",
          "parentId": "MTY4MzgxMjg0NTI5MzEwMDg2NTE5",
          "title": "Executor"
        },
        {
          "id": "MTY4MzgxMjg4NTI0NDEwMDg2NTE5",
          "type": "select",
          "parentId": "MTY4MzgxMjg0NTI5MzEwMDg2NTE5",
          "items": [
            "2935DOM",
            "2936DOM",
            "2949DOM",
            "3039DOM"
          ],
          "title": "TAG",
          "value": "2935DOM"
        },
        {
          "id": "MTY4MzgxMjg5MjUwNDEwMDg2NTE5",
          "type": "inputDateWithOutTime",
          "parentId": "MTY4MzgxMjg0NTI5MzEwMDg2NTE5",
          "title": "Data do Ensaio"
        },
        {
          "id": "MTY4NDQyNzU1NDYxNzEwMDg4NDk4",
          "type": "select",
          "parentId": "MTY4MzgxMjg0NTI5MzEwMDg2NTE5",
          "items": [
            "Frio",
            "Quente"
          ],
          "title": "Ciclo",
          "lock": true
        }
      ],
      "title": "Ciclo",
      "value": "2935DOM"
    },
    {
      "id": "MTY4MzgxMzEzNTM0OTEwMDg2NTE5",
      "type": "h3",
      "value": "Arquivos"
    },
    {
      "id": "MTY4MDExOTE0MDAzMjEwMDg4NDk4",
      "type": "list",
      "items": [
        {
          "id": "MTY4MDExOTE0NDk2NTEwMDg4NDk4",
          "type": "file",
          "parentId": "MTY4MDExOTE0MDAzMjEwMDg4NDk4",
          "source": "const parentCell = this.TextDocument.cells.find(c=> c.id === cell.parentId);\r\n\r\n\r\n\r\nconst  csvToArray = (str, delimiter) =>{\r\n    var rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\r\n    const number_rows = rows.indexOf(\"\")\r\n    let flag = rows\r\n      for (let i = 1; i < number_rows; i++) {\r\n        rows[i-1]=flag[i]\r\n      }\r\n    rows=rows.filter((str) => str !== '')\r\n  \r\n      // slice from start of text to the first \\n index\r\n      // use split to create an array from string by delimiter\r\n    var headers = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\")[0].split(delimiter);\r\n    //Valor 1-avg[V]\r\n\r\n    headers[2] =\"volts\"\r\n\r\n    const arr = rows.map(function (row) {\r\n        const values = row.split(delimiter);\r\n        const el = headers.reduce(function (object, header, index) {\r\n        \r\n        if(header==\"volts\"){\r\n            let t = +values[index].replace(/[\",\"]+/g, '.')\r\n            object[header] = t;\r\n        }\r\n        else{object[header] = values[index];}\r\n        \r\n        \r\n        return object;\r\n        }, {});\r\n        return el;\r\n    });\r\n    \r\n      // return the array\r\n    return arr;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst Filter_Data = (data,op)=>{\r\nif(op==\"max\")\r\n{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.max(...data)\r\n}\r\nelse{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.min(...data)\r\n}\r\n}\r\n\r\nlet data = await readFile(parentCell.items[0].value)\r\ndata = await csvToArray(data,\";\")\r\n\r\nconst Max_tension = JSON.stringify(await Filter_Data(data,\"max\"))\r\nconst Min_tension = JSON.stringify(await Filter_Data(data,\"min\"))\r\n\r\nlet nominal_tension =0\r\nif(Min_tension<127 && Min_tension>100){nominal_tension=127}\r\nif(Max_tension<220 && Max_tension>200){nominal_tension=220}\r\n\r\nlet obs=\"Erro de faixa: \"\r\nif((+Max_tension<(nominal_tension-nominal_tension*0.02)) || (+Max_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Maxima (\"+Max_tension+\").\"\r\n  \r\n}\r\nif((+Min_tension<(nominal_tension-nominal_tension*0.02)) || (+Min_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Minima (\"+Min_tension+\").\"\r\n  \r\n}\r\nif(obs.length>15){parentCell.items[1].value =obs}\r\nelse{parentCell.items[1].value=\"\"}\r\n\r\nparentCell.metadata = {};\r\nparentCell.metadata.Max_tension = +Max_tension;\r\nparentCell.metadata.Min_tension = +Min_tension;",
          "metadata": {
            "alreadyExecuted": false,
            "output": ""
          },
          "title": "Arquivo das tensões do ciclo 1&nbsp;",
          "value": ""
        },
        {
          "id": "MTY5MTU4OTUzMjA0NTEwMDg4NDk4",
          "type": "input",
          "parentId": "MTY4MDExOTE0MDAzMjEwMDg4NDk4",
          "title": "Observações"
        }
      ],
      "title": "Observações",
      "metadata": {
        "Max_tension": 218.441,
        "Min_tension": 217.691
      }
    },
    {
      "id": "MTY4MDE4MDYxNjM0MDEwMDg4NDk4",
      "type": "list",
      "items": [
        {
          "id": "MTY4MDE4MDYyMzE4NjEwMDg4NDk4",
          "type": "file",
          "parentId": "MTY4MDE4MDYxNjM0MDEwMDg4NDk4",
          "source": "const parentCell = this.TextDocument.cells.find(c=> c.id === cell.parentId);\r\n\r\n\r\n\r\nconst  csvToArray = (str, delimiter) =>{\r\n    var rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\r\n    const number_rows = rows.indexOf(\"\")\r\n    let flag = rows\r\n      for (let i = 1; i < number_rows; i++) {\r\n        rows[i-1]=flag[i]\r\n      }\r\n    rows=rows.filter((str) => str !== '')\r\n  \r\n      // slice from start of text to the first \\n index\r\n      // use split to create an array from string by delimiter\r\n    var headers = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\")[0].split(delimiter);\r\n    //Valor 1-avg[V]\r\n\r\n    headers[2] =\"volts\"\r\n\r\n    const arr = rows.map(function (row) {\r\n        const values = row.split(delimiter);\r\n        const el = headers.reduce(function (object, header, index) {\r\n        \r\n        if(header==\"volts\"){\r\n            let t = +values[index].replace(/[\",\"]+/g, '.')\r\n            object[header] = t;\r\n        }\r\n        else{object[header] = values[index];}\r\n        \r\n        \r\n        return object;\r\n        }, {});\r\n        return el;\r\n    });\r\n    \r\n      // return the array\r\n    return arr;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst Filter_Data = (data,op)=>{\r\nif(op==\"max\")\r\n{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.max(...data)\r\n}\r\nelse{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.min(...data)\r\n}\r\n}\r\n\r\nlet data = await readFile(parentCell.items[0].value)\r\ndata = await csvToArray(data,\";\")\r\n\r\nconst Max_tension = JSON.stringify(await Filter_Data(data,\"max\"))\r\nconst Min_tension = JSON.stringify(await Filter_Data(data,\"min\"))\r\n\r\nlet nominal_tension =0\r\nif(Min_tension<127 && Min_tension>100){nominal_tension=127}\r\nif(Max_tension<220 && Max_tension>200){nominal_tension=220}\r\n\r\nlet obs=\"Erro de faixa: \"\r\nif((+Max_tension<(nominal_tension-nominal_tension*0.02)) || (+Max_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Maxima (\"+Max_tension+\").\"\r\n  \r\n}\r\nif((+Min_tension<(nominal_tension-nominal_tension*0.02)) || (+Min_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Minima (\"+Min_tension+\").\"\r\n  \r\n}\r\nif(obs.length>15){parentCell.items[1].value =obs}\r\nelse{parentCell.items[1].value=\"\"}\r\n\r\nparentCell.metadata = {};\r\nparentCell.metadata.Max_tension = +Max_tension;\r\nparentCell.metadata.Min_tension = +Min_tension;",
          "metadata": {
            "alreadyExecuted": false,
            "output": ""
          },
          "title": "Arquivo das tensões do ciclo 2&nbsp;",
          "value": ""
        },
        {
          "id": "MTY5MTU4OTUzNTM5MDEwMDg4NDk4",
          "type": "input",
          "parentId": "MTY4MDE4MDYxNjM0MDEwMDg4NDk4",
          "title": "Observações"
        }
      ],
      "title": "Observações",
      "metadata": {
        "Max_tension": 218.448,
        "Min_tension": 217.238
      }
    },
    {
      "id": "MTY4MDE4MDY0ODM3MDEwMDg4NDk4",
      "type": "list",
      "items": [
        {
          "id": "MTY4MDE4MDY1NzA0OTEwMDg4NDk4",
          "type": "file",
          "parentId": "MTY4MDE4MDY0ODM3MDEwMDg4NDk4",
          "source": "const parentCell = this.TextDocument.cells.find(c=> c.id === cell.parentId);\r\n\r\n\r\n\r\nconst  csvToArray = (str, delimiter) =>{\r\n    var rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\r\n    const number_rows = rows.indexOf(\"\")\r\n    let flag = rows\r\n      for (let i = 1; i < number_rows; i++) {\r\n        rows[i-1]=flag[i]\r\n      }\r\n    rows=rows.filter((str) => str !== '')\r\n  \r\n      // slice from start of text to the first \\n index\r\n      // use split to create an array from string by delimiter\r\n    var headers = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\")[0].split(delimiter);\r\n    //Valor 1-avg[V]\r\n\r\n    headers[2] =\"volts\"\r\n\r\n    const arr = rows.map(function (row) {\r\n        const values = row.split(delimiter);\r\n        const el = headers.reduce(function (object, header, index) {\r\n        \r\n        if(header==\"volts\"){\r\n            let t = +values[index].replace(/[\",\"]+/g, '.')\r\n            object[header] = t;\r\n        }\r\n        else{object[header] = values[index];}\r\n        \r\n        \r\n        return object;\r\n        }, {});\r\n        return el;\r\n    });\r\n    \r\n      // return the array\r\n    return arr;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst Filter_Data = (data,op)=>{\r\nif(op==\"max\")\r\n{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.max(...data)\r\n}\r\nelse{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.min(...data)\r\n}\r\n}\r\n\r\nlet data = await readFile(parentCell.items[0].value)\r\ndata = await csvToArray(data,\";\")\r\n\r\nconst Max_tension = JSON.stringify(await Filter_Data(data,\"max\"))\r\nconst Min_tension = JSON.stringify(await Filter_Data(data,\"min\"))\r\n\r\nlet nominal_tension =0\r\nif(Min_tension<127 && Min_tension>100){nominal_tension=127}\r\nif(Max_tension<220 && Max_tension>200){nominal_tension=220}\r\n\r\nlet obs=\"Erro de faixa: \"\r\nif((+Max_tension<(nominal_tension-nominal_tension*0.02)) || (+Max_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Maxima (\"+Max_tension+\").\"\r\n  \r\n}\r\nif((+Min_tension<(nominal_tension-nominal_tension*0.02)) || (+Min_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Minima (\"+Min_tension+\").\"\r\n  \r\n}\r\nif(obs.length>15){parentCell.items[1].value =obs}\r\nelse{parentCell.items[1].value=\"\"}\r\n\r\n\r\nparentCell.metadata = {};\r\nparentCell.metadata.Max_tension = +Max_tension;\r\nparentCell.metadata.Min_tension = +Min_tension;",
          "metadata": {
            "alreadyExecuted": false,
            "output": ""
          },
          "title": "Arquivo das tensões do ciclo 3&nbsp;",
          "value": ""
        },
        {
          "id": "MTY5MTU4OTUzODMzODEwMDg4NDk4",
          "type": "input",
          "parentId": "MTY4MDE4MDY0ODM3MDEwMDg4NDk4",
          "title": "Observações"
        }
      ],
      "title": "Observações",
      "metadata": {
        "Max_tension": 218.542,
        "Min_tension": 217.545
      }
    },
    {
      "id": "MTY4MDE4MDY1MTgwNTEwMDg4NDk4",
      "type": "list",
      "items": [
        {
          "id": "MTY4MDE4MDY2MTAyMzEwMDg4NDk4",
          "type": "file",
          "parentId": "MTY4MDE4MDY1MTgwNTEwMDg4NDk4",
          "source": "const parentCell = this.TextDocument.cells.find(c=> c.id === cell.parentId);\r\n\r\n\r\n\r\nconst  csvToArray = (str, delimiter) =>{\r\n    var rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\r\n    const number_rows = rows.indexOf(\"\")\r\n    let flag = rows\r\n      for (let i = 1; i < number_rows; i++) {\r\n        rows[i-1]=flag[i]\r\n      }\r\n    rows=rows.filter((str) => str !== '')\r\n  \r\n      // slice from start of text to the first \\n index\r\n      // use split to create an array from string by delimiter\r\n    var headers = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\")[0].split(delimiter);\r\n    //Valor 1-avg[V]\r\n\r\n    headers[2] =\"volts\"\r\n\r\n    const arr = rows.map(function (row) {\r\n        const values = row.split(delimiter);\r\n        const el = headers.reduce(function (object, header, index) {\r\n        \r\n        if(header==\"volts\"){\r\n            let t = +values[index].replace(/[\",\"]+/g, '.')\r\n            object[header] = t;\r\n        }\r\n        else{object[header] = values[index];}\r\n        \r\n        \r\n        return object;\r\n        }, {});\r\n        return el;\r\n    });\r\n    \r\n      // return the array\r\n    return arr;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst Filter_Data = (data,op)=>{\r\nif(op==\"max\")\r\n{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.max(...data)\r\n}\r\nelse{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.min(...data)\r\n}\r\n}\r\n\r\nlet data = await readFile(parentCell.items[0].value)\r\ndata = await csvToArray(data,\";\")\r\n\r\nconst Max_tension = JSON.stringify(await Filter_Data(data,\"max\"))\r\nconst Min_tension = JSON.stringify(await Filter_Data(data,\"min\"))\r\n\r\nlet nominal_tension =0\r\nif(Min_tension<127 && Min_tension>100){nominal_tension=127}\r\nif(Max_tension<220 && Max_tension>200){nominal_tension=220}\r\n\r\nlet obs=\"Erro de faixa: \"\r\nif((+Max_tension<(nominal_tension-nominal_tension*0.02)) || (+Max_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Maxima (\"+Max_tension+\").\"\r\n  \r\n}\r\nif((+Min_tension<(nominal_tension-nominal_tension*0.02)) || (+Min_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Minima (\"+Min_tension+\").\"\r\n  \r\n}\r\nif(obs.length>15){parentCell.items[1].value =obs}\r\nelse{parentCell.items[1].value=\"\"}\r\n\r\nparentCell.metadata = {};\r\nparentCell.metadata.Max_tension = +Max_tension;\r\nparentCell.metadata.Min_tension = +Min_tension;",
          "metadata": {
            "alreadyExecuted": false,
            "output": ""
          },
          "title": "Arquivo das tensões do ciclo 4&nbsp;",
          "value": ""
        },
        {
          "id": "MTY5MTU4OTU0MDkwMjEwMDg4NDk4",
          "type": "input",
          "parentId": "MTY4MDE4MDY1MTgwNTEwMDg4NDk4",
          "title": "Observações"
        }
      ],
      "title": "Observações",
      "metadata": {
        "Max_tension": 218.623,
        "Min_tension": 217.488
      }
    },
    {
      "id": "MTY4MDE4MDY1MzgzMTEwMDg4NDk4",
      "type": "list",
      "items": [
        {
          "id": "MTY4MDE4MDY2NDQ1MDEwMDg4NDk4",
          "type": "file",
          "parentId": "MTY4MDE4MDY1MzgzMTEwMDg4NDk4",
          "source": "const parentCell = this.TextDocument.cells.find(c=> c.id === cell.parentId);\r\n\r\n\r\n\r\nconst  csvToArray = (str, delimiter) =>{\r\n    var rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\r\n    const number_rows = rows.indexOf(\"\")\r\n    let flag = rows\r\n      for (let i = 1; i < number_rows; i++) {\r\n        rows[i-1]=flag[i]\r\n      }\r\n    rows=rows.filter((str) => str !== '')\r\n  \r\n      // slice from start of text to the first \\n index\r\n      // use split to create an array from string by delimiter\r\n    var headers = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\")[0].split(delimiter);\r\n    //Valor 1-avg[V]\r\n\r\n    headers[2] =\"volts\"\r\n\r\n    const arr = rows.map(function (row) {\r\n        const values = row.split(delimiter);\r\n        const el = headers.reduce(function (object, header, index) {\r\n        \r\n        if(header==\"volts\"){\r\n            let t = +values[index].replace(/[\",\"]+/g, '.')\r\n            object[header] = t;\r\n        }\r\n        else{object[header] = values[index];}\r\n        \r\n        \r\n        return object;\r\n        }, {});\r\n        return el;\r\n    });\r\n    \r\n      // return the array\r\n    return arr;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst Filter_Data = (data,op)=>{\r\nif(op==\"max\")\r\n{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.max(...data)\r\n}\r\nelse{\r\n  data= data.map(item=>{\r\n    const conteiner={}\r\n    conteiner[\"volts\"]=item.volts\r\n    return conteiner[\"volts\"]\r\n    })\r\n    return  Math.min(...data)\r\n}\r\n}\r\n\r\nlet data = await readFile(parentCell.items[0].value)\r\ndata = await csvToArray(data,\";\")\r\n\r\nconst Max_tension = JSON.stringify(await Filter_Data(data,\"max\"))\r\nconst Min_tension = JSON.stringify(await Filter_Data(data,\"min\"))\r\n\r\nlet nominal_tension =0\r\nif(Min_tension<127 && Min_tension>100){nominal_tension=127}\r\nif(Max_tension<220 && Max_tension>200){nominal_tension=220}\r\n\r\nlet obs=\"Erro de faixa: \"\r\nif((+Max_tension<(nominal_tension-nominal_tension*0.02)) || (+Max_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Maxima (\"+Max_tension+\").\"\r\n  \r\n}\r\nif((+Min_tension<(nominal_tension-nominal_tension*0.02)) || (+Min_tension>(nominal_tension+nominal_tension*0.02))){\r\n  obs = obs+\" Tensão Minima (\"+Min_tension+\").\"\r\n  \r\n}\r\nif(obs.length>15){parentCell.items[1].value =obs}\r\nelse{parentCell.items[1].value=\"\"}\r\n\r\nparentCell.metadata = {};\r\nparentCell.metadata.Max_tension = +Max_tension;\r\nparentCell.metadata.Min_tension = +Min_tension;",
          "metadata": {
            "alreadyExecuted": false,
            "output": ""
          },
          "title": "Arquivo das tensões do ciclo 5&nbsp;",
          "value": ""
        },
        {
          "id": "MTY5MTU4OTk1NTIwMjEwMDg4NDk4",
          "type": "input",
          "parentId": "MTY4MDE4MDY1MzgzMTEwMDg4NDk4",
          "title": "Observações"
        }
      ],
      "title": "Observações",
      "metadata": {
        "Max_tension": 218.448,
        "Min_tension": 217.238
      },
      "": ""
    },
    {
      "id": "MTY4MTQxMTU3MTI3NzEwMDg4NDk4",
      "type": "ps1",
      "source": "this.cell.metadata = {html: \"Lendo Incertezas ...\"};\r\nvscode.postMessage({\r\n    type: 'sp_request', \r\n    method: 'GET',\r\n    url: `https://brpucrs.sharepoint.com/sites/Labelo_Processos/_api/web/lists/GetByTitle('Incerteza')/items?$filter=FileDirRef eq '/sites/Labelo_Processos/Lists/CES/Máquinas de Lavar' and Grandeza eq 'Tensão'`,\r\n    data: this.TextDocument,\r\n    id: this.cell.id\r\n});",
      "metadata": {},
      "title": "Atualizar incertezas",
      "": "",
      "icon": "fa fa-play"
    }
  ],
  "report_template": {
    "type": "code",
    "id": "report_template",
    "source": "const getCell = (id)=> register.cells.find(c=>c.id===id);\r\n\r\nconst sp = getCell('MTY4MTQxMTU3MTI3NzEwMDg4NDk4').metadata.sp || [];\r\nlet instrument = getCell('MTY4MzgxMjg0NTI5MzEwMDg2NTE5').items[1].value\r\ninstrument = sp.find(s => s.Title=== instrument)\r\n\r\nif (!instrument) {\r\n    return `<span class=\"error\">Nenhum instrumento encontrado</span>`\r\n}\r\n\r\n// \"Resolu_x00e7__x00e3_o\": 0.01,\r\n// \"Crit_x002e_Aceitacao_x0028_perce\": 0,\r\n// \"Criterio_Aceitacao_x0028_percetu\": 0.01,\r\n// \"criteriovalorabsoluto\": 0,\r\n\r\nconst ciclos = [\r\n'MTY4MDExOTE0MDAzMjEwMDg4NDk4',\r\n'MTY4MDE4MDYxNjM0MDEwMDg4NDk4',\r\n'MTY4MDE4MDY0ODM3MDEwMDg4NDk4',\r\n'MTY4MDE4MDY1MTgwNTEwMDg4NDk4',\r\n'MTY4MDE4MDY1MzgzMTEwMDg4NDk4'\r\n].map(id => {\r\n    const cell = getCell(id);\r\n    console.log(cell)\r\n    return {Max_tension: cell.metadata.Max_tension, Min_tension: cell.metadata.Min_tension}\r\n});\r\n\r\nconst Max_tension_average = Math.max(...ciclos.map(c => c.Max_tension))\r\nconst Min_tension_average = Math.min(...ciclos.map(c => c.Min_tension))\r\n\r\nconst contributes = [\r\n    {\r\n        value: instrument.Criterio_Aceitacao_x0028_percetu * Max_tension_average + instrument.criteriovalorabsoluto,\r\n        divisor: Math.sqrt(3),\r\n        name: \"Critério de aceitação do plano de calibração\",\r\n        cs: 1,\r\n        v_eff: 1e5\r\n    },\r\n    {\r\n        value: (instrument.Resolu_x00e7__x00e3_o)/2,\r\n        divisor: Math.sqrt(3),\r\n        name: \"Resolução\",\r\n        cs: 1,\r\n        v_eff: 1e5\r\n    },\r\n    {\r\n        value: IM.standardDeviation([...ciclos.map(c => c.Max_tension), ...ciclos.map(c => c.Min_tension)])/2,\r\n        divisor: Math.sqrt(ciclos.length * 2),\r\n        name: \"Desvio Padrão\",\r\n        cs: 1,\r\n        v_eff: (ciclos.length * 2) - 1\r\n    }\r\n]\r\n\r\nconst {u} = IM.calculate(contributes);\r\nreturn`\r\n<table>\r\n    <tr>\r\n        <th>Descrição</th>\r\n        <th>Valor</th>\r\n        <th>Incerteza</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Tensão máxima</td>\r\n        <td>${Max_tension_average}</td>\r\n        <td>&pm; ${u}</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Tensão mínima</td>\r\n        <td>${Min_tension_average}</td>\r\n        <td>&pm; ${u}</td>\r\n    </tr>\r\n</table>\r\n\r\n\r\n`",
    "metadata": {
      "output": "<span class=\"error\">Nenhum instrumento encontrado</span>"
    }
  },
  "metadata": {
    "lastModified": "2023-08-24T17:54:35.195Z"
  }
}